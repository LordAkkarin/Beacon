/*
 * Copyright 2020 Johannes Donath <johannesd@torchmind.com>
 * and other copyright owners as documented in the project's IP log.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package tv.dotstart.beacon.core.delegate

import org.apache.logging.log4j.LogManager
import org.apache.logging.log4j.Logger
import kotlin.reflect.KClass
import kotlin.reflect.KProperty

/**
 * Provides a read-only property which acquires a logger instance for its enclosing class upon
 * in a lazy fashion.
 *
 * Unless debug information has been stripped from the application binary, this implementation will
 * consider properties within companion objects to be enclosed in their respective parents thus
 * removing unnecessary clutter from the application log.
 *
 * Note: This implementation returns non-formatting logger instances as formatting is expected to
 * be handled within application code through the language's templating functionality.
 *
 * @author [Johannes Donath](mailto:johannesd@torchmind.com)
 * @date 03/12/2020
 */
class LoggerReadOnlyProperty : AbstractLazyReadOnlyProperty<Any, Logger>() {

  companion object {

    /**
     * Identifies the Java type which is to be used as a source for log messages generated by a
     * given Kotlin type.
     *
     * Typically this property will simply return a reference to the respective Java class. In case
     * of companion objects, their enclosing type (if such information is present within the
     * Class bytecode) is returned instead.
     */
    private val KClass<*>.loggerType: Class<*>
      get() = this.takeIf(KClass<*>::isCompanion)
          ?.java
          ?.enclosingClass
          ?: this.java
  }

  override fun initialize(thisRef: Any, property: KProperty<*>): Logger =
      LogManager.getLogger(thisRef::class.loggerType)
}

/**
 * Provides a shorthand constructor for receiving logger property instances.
 *
 * This function primarily provides syntactic sugar:
 *
 * ```
 * val logger by logManager()
 * ```
 */
fun logManager() = LoggerReadOnlyProperty()
